#!/usr/bin/env python
from __future__ import print_function


import math
from netCDF4 import Dataset as nc
import numpy as np
import matplotlib.pylab as mpl
import matplotlib.colors as colors
import re
# import flo_utils as fu

from argparse import ArgumentParser
# import json
# import os
# import shlex
# import shutil
# import subprocess
import sys
from mpl_toolkits.basemap import Basemap

try:
  import seaborn as sns
  seaborn = True
except ImportError:
  seaborn = False


try:
  import colormaps as cmaps
  mpl.register_cmap(name='viridis', cmap=cmaps.viridis)
  mpl.set_cmap(cmaps.viridis)
  mpl.register_cmap(name='viridis_r', cmap=cmaps.viridis_r)
  print ("Got viridis")
except ImportError:
  print ("Viridis not found")

def fix_attrs(vars,labels):
  for n,x in enumerate(labels):
    if x in vars.keys():
      if "long_name" in vars[x].ncattrs():
        labels[n] = vars[x].long_name
  return labels

def read_var(var, filename, options):
  f = nc(filename)
  vars = f.variables
  var = vars[var]
  if type(var[:]) is np.ma.masked_array:
    data = np.ma.masked_array(np.squeeze(var),np.squeeze(var[:].mask))
  else :
    data = np.squeeze(var)
  if options.missval is not None:
    data = np.ma.masked_values(data, options.missval)
  dims = var.dimensions
  sizes = var.shape
  attrs = { k:  var.getncattr(k) for k in var.ncattrs()}
  dimensions = [vars.get(x,np.arange(sizes[n])) for n,x in enumerate(dims) if sizes[n] > 1 ]
  offset=-1
  labels = [""] * len (dims)
  for n,x in enumerate (dims):
    if sizes[n] > 1:
      offset += 1
      labels[offset] = dims[n]
      if not x  in vars.keys():
        print ("Trying to substitute %s"%(x))
        if ("lat" in vars.keys() and "lon" in vars.keys() and (vars["lat"].size > 1 or vars ["lon"].size > 1)):
          if len(vars["lat"].shape) > 1:
            break
          print ("Found coordinate variables")
          la = np.squeeze(vars["lat"])
          lo = np.squeeze(vars["lon"])
          print (lo.shape)
          if la.shape == lo.shape == (sizes[n],):
            print ("Sizes match")
            lad = la[-1]-la[0]
            lod = lo[-1]-lo[0]
            if (abs(lad) > abs (lod)):
              dimensions[offset]=la
              labels[offset] = "lat"
            else:
              dimensions[offset]=lo
              labels[offset] = "lon"
  if ("lat" in vars.keys() and "lon" in vars.keys() and (len(vars["lat"].shape) > 1 or options.GL or options.ANT or options.NATL or options.mapit )):
    print ("found 2d coordinates")
    labels[0] = ""
    labels[1] = ""
    dimensions = dimensions +[ vars["lat"], vars["lon"] ]
  else:
    if options.transpose: # python has a very strange understanding of order -- we'll fix that
      dimensions=dimensions[::-1]
      labels=labels[::-1]
    else:
      data = data.transpose()
    labels = fix_attrs(vars, labels)

  return (data, attrs, dimensions, labels)


def sort_levels (levels = None, minmax=None):
#   levels = levels[0] if levels else None
  if not levels is None:
    levels = np.array([float(x) for x in levels.split(',')])
#    levels = [data.min()] + levels + [data.max()]
    if (len(levels) == 1 ):
      levels = int(levels[0])
      if not minmax is None:
        vrange = minmax[1]-minmax[0]
        step = vrange/(levels-1.)
        levels=np.arange(minmax[0], minmax[1]+step, step)
  else:
    levels = None
  return levels

def contour_var(var, filename, options):
  # Get the data
  (data, attrs, dimensions, labels) = read_var(var, filename, options)
  # Get the data
  if not options.sub is None :
    (sub_data, sub_attrs, sub_dimensions, sub_labels) = read_var(var, options.sub, options)
    data = data - sub_data

  # COLORMAP
  cmap = None
#  cmap = sns.color_palette(options.cmap, options.levels if options.levels and len(options.levels.split(",")) == 1 else 7, as_cmap=True)
  try:
    if (options.cmap):
      cmap=options.cmap
    else:
      cmap = sns.cubehelix_palette(as_cmap=True, start=.5)
  except:
    print ("Trouble using colorbar %s with %s levels"%(options.cmap, levels if levels else "None"), file=sys.stderr)

  # LEVELS
  levels = sort_levels(options.levels, options.minmax)
  norm = None
  if not levels is None:
    if len(levels) > 1:
      norm = colors.BoundaryNorm(boundaries=levels, ncolors=256)

  # map and projection stuff
  if (len(dimensions) >= 4 or options.GL or options.ANT or options.NATL or options.mapit)  : # 2d coordinates
    print ("using 2d coordinates")
    # map = Basemap(width=8000000,height=8500000,
    #                  resolution='l',projection='stere',\
    #                  lat_ts=70,lat_0=72,lon_0=-45.)
    if not (options.ll is None or options.ur is None):
      llcrnrlon = options.ll[1]
      urcrnrlon = options.ur[1]
      llcrnrlat = options.ll[0]
      urcrnrlat = options.ur[0]
    else:
      llcrnrlon = dimensions[-1][0,0]
      urcrnrlon = dimensions[-1][-1,-1]
      llcrnrlat = dimensions[-2][0,0]
      urcrnrlat = dimensions[-2][-1,-1]
  slices = False
  print ("DS")
  print (data.shape)
  if (len(data.shape) == 3):
    slices = True
    slicecount = len(data)
    alldata = data # data.transpose((2,0,1))
    print ("ADS")
    print (alldata.shape)
  else:
    alldata = data.reshape([1]+[ i for i in data.shape])
  for (num, data) in enumerate(alldata):
    if (options.figsize):
      mpl.figure(figsize=options.figsize)
    print ("LDIMS ", len(dimensions))
    if (len(dimensions) >= 4  or options.GL or options.ANT or options.NATL or options.mapit) : # 2d coordinates
      if options.GL:
        map = Basemap(llcrnrlon=llcrnrlon,urcrnrlon=urcrnrlon,llcrnrlat=llcrnrlat,urcrnrlat=urcrnrlat,
                      resolution='l',projection='stere',\
                      lat_ts=71,lat_0=90,lon_0=-39.)
        print ("GL")
      elif options.NATL:
            map = Basemap(width=9500000,height=9500000,
                       resolution='l',projection='stere',\
                       lat_ts=71,lat_0=87,lon_0=-44.)
      elif options.diss_proj:
        print (llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat)
        map = Basemap(llcrnrlon=llcrnrlon,urcrnrlon=urcrnrlon,llcrnrlat=llcrnrlat,urcrnrlat=urcrnrlat,
                      resolution='l',projection='stere',\
                      lat_0=90, lat_ts=71,lon_0=-44.)
      elif options.ANT:
        print ("ANT")
        print (llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat)
        map = Basemap(llcrnrlon=llcrnrlon,urcrnrlon=urcrnrlon,llcrnrlat=llcrnrlat,urcrnrlat=urcrnrlat,
                      resolution='l',projection='stere',\
                      lat_0=-90, lat_ts=-71,lon_0=180)
      else:
        print ("USING NSIDC POLAR STEREOGRAPHIC PROJECTION 90 -45 70")
        print (llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat)
        map = Basemap(llcrnrlon=llcrnrlon,urcrnrlon=urcrnrlon,llcrnrlat=llcrnrlat,urcrnrlat=urcrnrlat,
                      resolution='f',projection='stere',\
                      lat_0=90, lat_ts=70,lon_0=-45.)
      if (len (dimensions[-1][:].shape) > 1 ):
        x, y = map(dimensions[-1][:], dimensions[-2][:])
      else:
        x, y = map(*np.meshgrid(dimensions[-1][:], dimensions[-2][:]))

      pl = map
    else:
      pl = mpl
      x = dimensions[0][:]
      y = dimensions[1][:]

    # DRAW IT
    if (not levels is None ):
      if (not norm is None):
        pl.pcolormesh(x, y, data,  norm = norm ,  cmap=cmap )
      else:
        pl.pcolormesh(x, y, data,   cmap=cmap)
      mpl.colorbar()
      pl.contour (x, y, data, levels,  colors="0.5", linewidths=.25, linestyles="solid")
    else:
      pl.pcolormesh(x, y, data,  cmap=cmap)
      mpl.colorbar()
      pl.contour (x, y, data,  colors="0.5", linewidths=.25, linestyles="solid")
    if options.scaled:
      mpl.axis("scaled")

    if (len(dimensions)  >= 4 or options.GL or options.ANT or options.NATL or options.mapit) : # 2d coordinates
      pl.drawcoastlines(linewidth=0.25)
      pl.drawrivers(linewidth=0.25)
      pl.drawmeridians(np.arange(0,360,10),linewidth=.25, dashes=[10,1e-6],color=(.5,.5,.5))
      pl.drawparallels(np.arange(-90,90,10),linewidth=.25, dashes=[10,1e-6],color=(.5,.5,.5))

    # OVERLAY
    if not options.overlay_var is None:
      if options.overlay_file is None:
        (overlay_data, overlay_attrs, overlay_dimensions, overlay_labels) = read_var (options.overlay_var, filename, options)
      else:
        (overlay_data, overlay_attrs, overlay_dimensions, overlay_labels) = read_var (options.overlay_var, options.overlay_file, options)
      overlay_levels = sort_levels (options.overlay_levels)
      if (overlay_levels is not None):
        CS = pl.contour(x, y, overlay_data, overlay_levels, colors="k", linewidths=.25)
#        mpl.clabel(CS, fmt="%s")
      else:
        CS = pl.contour(x, y, overlay_data, colors="k", linewidths=.25)
#        mpl.clabel(CS, fmt="%s")

    # MAKE IT NICE
    if "xlim" in options:
        mpl.xlim(options.xlim)
    if "ylim" in options:
      mpl.ylim(options.ylim)
    mpl.xlabel(labels[0])
    mpl.ylabel(labels[1])

    if options.title is None:
      mpl.title("%s (%s)"%(attrs.get("long_name", var), attrs.get("units", "unknown units")))
    else:
      mpl.title(options.title)

    # SAVE TO FILE OR SHOW
    if not slices:
      if not options.outfile is  None:
        if options.outfile[-3:] == "png":
          mpl.savefig(options.outfile, dpi=400 )
          mpl.close('all')
        else:
          mpl.savefig(options.outfile)
          mpl.close('all')
      else:
        mpl.show()
        mpl.close('all')
    else:
      if not options.outfile is  None:
        lsc = math.ceil(math.log10(slicecount))
        if (lsc < 3):
          myout=re.sub(r'(.*)(\..*)', r'\1_%02d\2'%num, options.outfile)
        else:
          myout=re.sub(r'(.*)(\..*)', r'\1_%04d\2'%num, options.outfile)
        if options.outfile[-3:] == "png":
          mpl.savefig(myout, dpi=400 )
          mpl.close('all')
        else:
          mpl.savefig(myout)
          mpl.close('all')
      else:
        mpl.show()
        mpl.close('all')


def parse_args():
  '''Parses the command line arguments'''

  parser = ArgumentParser()
  parser.description = "Draw a contour plot"
  parser.add_argument("var")
  parser.add_argument("filename")

  parser.add_argument("-v", "--verbose",
    help='''Be verbose''', action="store_true")

  parser.add_argument("-o", "--outfile",
                      help='''output file to save image to''', default=None)
  parser.add_argument("--figsize",
                      help='''Size of image''', default=(10,8), type=float, nargs=2)

  parser.add_argument("-t", "--transpose",
    help='''transpose field (flip axis)''', action="store_true")
  parser.add_argument("--xlim",
    help='''set x limits (decreasing flips axis)''', nargs=2, type=float)
  parser.add_argument("--ylim",
    help='''set y limits (decreasing flips axis)''', nargs=2, type=float)
  parser.add_argument("--scaled",
                      help='''same scaling on both axes''', action="store_true")

  parser.add_argument("--ll",
    help='''lat lon of lower left corner NEEDS --ur''', nargs=2, type=float)
  parser.add_argument("--ur",
    help='''lat lon of upper right corner NEEDS --ll''', nargs=2, type=float)
  parser.add_argument("-G", "--GL",
                      help='''Adjust map for Greenland plot''', action="store_true")
  parser.add_argument("-N", "--NATL",
                      help='''Adjust map for NATL plot''', action="store_true")
  parser.add_argument("-A", "--ANT",
                      help='''Adjust map for ANT plot''', action="store_true")
  parser.add_argument( "--diss_proj",
                      help='''Adjust map for diss projection plot''', action="store_true")
  parser.add_argument("--mapit",
                      help='''Definitely do map plot''', action="store_true")

  parser.add_argument("-m", "--minmax",
                      help='''set minimum and maximum for contours''', nargs=2, type=float, default = None)
  parser.add_argument("--levels",
                      help='''set levels for plotting. n = n levels, 1,2,3 = draw levels at 1, 2, and 3''')

  parser.add_argument("-T", "--title",
                      help='''plot title''', default=None)
  parser.add_argument("-c", "--cmap",
    help='''Name of a colormap''')

  parser.add_argument("-s", "--sub", default=None)
  parser.add_argument("--missval", type = float, default = None)

  parser.add_argument("--overlay_var", default=None)
  parser.add_argument("--overlay_file", default=None)
  parser.add_argument("--overlay_levels", default=None,
    help='''set levels for plotting. n = n levels, 1,2,3 = draw levels at 1, 2, and 3''')


  options = parser.parse_args()
  return options


def main():
  '''Analyze the run. Call all that's needed.'''
  options = parse_args()
  contour_var(options.var, options.filename, options)

if __name__ == "__main__":
  main()
