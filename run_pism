#!/usr/bin/env python
# -*- mode:python -*-

import argparse
import json
import os
import shlex
import shutil
import subprocess
import sys
import flo_utils as fu

def backup_file(filename):
    if os.access(filename, os.R_OK):
        print "file " + filename + " exists. Moving it to " + filename + "~"
        shutil.move(filename, filename + "~")


parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="verbose output",
                    action="store_true", default = False)

parser.add_argument("-e", "--echo", help="only print command",
                    action="store_true", default = False)


parser.add_argument("-i", "--input",  help="input file", default = None)
parser.add_argument("-c", "--config",  help="run_pism config file", default="run_pism.conf")
parser.add_argument("-a", "--atmosphere_given_file",  help="atmosphere input")
parser.add_argument("--surface_given_file",  help="smb+tsurf input")
parser.add_argument("--ocean_th_file",  help="ocean forcing input")
parser.add_argument("--ocean_delta_SL_file",  help="varying sea level input")
parser.add_argument("-o", "--output", help="output file", default = None)
parser.add_argument("--ys", help="startyear", default = None)
parser.add_argument("-b", "--bootstrap", help="bootstrap (instead of restart)" , action="store_true" )
parser.add_argument("-r", "--regrid_file", help="regrid file (if desired)" , default = None )
parser.add_argument("--config_override", help="config_override file (if desired)" , default = None )
parser.add_argument("-p" ,"--pass_arguments", help="extra arguments to be passed on, quote and start with a space" , default = None )
parser.add_argument("--force_to_thk", help="surface forcing file" , default = None )
parser.add_argument("--force_to_thk_alpha", help="surface forcing alpha" , default = None )
parser.add_argument("--smb_only", help="only compute SMB, no flow fields" , action = "store_true" , default=False)

group = parser.add_mutually_exclusive_group()
group.add_argument("-y", "--years", help="years to run", default = None)
group.add_argument("--time_file", help="time file to specify run duration", default = None)

group = parser.add_mutually_exclusive_group()
group.add_argument("--ssa", action="store_true", help="use ssa")
group.add_argument("--no-ssa", action="store_false", dest = "ssa", help="do not use ssa")

group = parser.add_mutually_exclusive_group()
group.add_argument("--no_mpi", action="store_true", help="run without mpi", default = False)
group.add_argument("--mpi", action="store_false", dest = "no_mpi", help="run with mpi (default)")



args = parser.parse_args()

if args.verbose:
    fu.debug = True
args_dict = vars(args)

pism_args = []

config = {}
if os.access(args.config, os.R_OK):
    config = json.load(open(args.config,"r"))

for x in args_dict.keys():
    if not args_dict[x] is  None :
        config[x] = args_dict[x]

errors = 0
required = ( "output",)
for x in required:
    if not x in config.keys():
        print "run_pism:ERROR: option " + x + " missing! GOING TO EXIT"
        errors = errors + 1

if not "years" in config.keys() and not "time_file" in config.keys():
        print "run_pism:ERROR: Don't know for how long to run. Need -y or --time_file! GOING TO EXIT"
        errors = errors + 1


if ( not args.input):
    print "run_pism: ERROR: need some input --input or -i ! GOING TO EXIT!"
    errors = errors + 1

if args.input:
    pism_args.append(" -i " + args.input)

if args.output[-3:] == ".nc":
    output_start = args.output[:-3]
    fu.mkdir(output_start)
    output_start="%s/%s"%(output_start,output_start)

else:
    print "run_pism: ERROR: need netcdf output file name ending on '.nc' ! GOING TO EXIT!"
    errors = errors + 1



if errors:
  print "arguments:"
  print args_dict
  print "full config:"
  print config
  sys.exit(1)

if args.smb_only:
    config["ssa"] = False
    pism_args.append("-test_climate_models -no_mass")


if config["ssa"]:
#    pism_args.append("-ssa_sliding")
    pism_args.append("-stress_balance ssa+sia")


if args.bootstrap:
    boot=" -bootstrap  "  + config["geometry"] + config["bootopts"]
    pism_args.append(boot)

if args.regrid_file:
    regrid=" -regrid_vars litho_temp,thk,enthalpy,tillwat,tillphi,bmelt -regrid_file %s "%(args.regrid_file)
    pism_args.append(regrid)

if "years" in config.keys():
  pism_args.append(" -y " + config["years"])
  if "ys" in config.keys():
    pism_args.append("-ys " + config["ys"])
elif "time_file" in config.keys():
  pism_args.append(" -time_file %s "%(config["time_file"]))
else:
  fu.cerr("GOT NEITHER years nor time_file. Should not have got this far in the code. WHATEVER I'll call it a day...'")
  sys.exit(666)

pism_args.append("-o " + output_start+".nc")


if "max_dt" in config.keys():
    pism_args.append(" -max_dt " + config["max_dt"])

if ("atmosphere_given_file" in config.keys()):
    atmosphere = " -atmosphere given,lapse_rate "  + \
             " -atmosphere_given_file "        + config["atmosphere_given_file"]
    if "temp_lapse_rate" in config.keys():
        atmosphere +=             " -temp_lapse_rate " + config["temp_lapse_rate"]
    if "atmosphere_lapse_rate_file" in config.keys():
        atmosphere +=" -atmosphere_lapse_rate_file " + config["atmosphere_lapse_rate_file"]
    else:
        atmosphere +=" -atmosphere_lapse_rate_file " + config["atmosphere_given_file"]
    pism_args.append(atmosphere)

elif ("atmosphere_given_file" in config.keys()):
        atmosphere = " -atmosphere given "  + " -atmosphere_given_file "        + config["atmosphere_given_file"]
        pism_args.append(atmosphere)

if "atmosphere_given_period" in config.keys() :
    pism_args.append("-atmosphere_given_period " + config["atmosphere_given_period"])

if "surface" in config.keys():
    surface=config["surface"]
    if "force_to_thk" in config.keys():
        surface = surface + ",forcing"
        pism_args.append(" -force_to_thk " + config["force_to_thk"])

        if "force_to_thk_alpha" in config.keys():
            pism_args.append("-force_to_thk_alpha " + config["force_to_thk_alpha"] )

            if "surface_cache_update_interval" in config.keys():
                surface = surface + ",cache"
                pism_args.append("-surface_cache_update_interval " + config["surface_cache_update_interval"])

    if config["surface"] == "given" and config.get("surface_given_file",False):
        pism_args.append(" -surface_given_file %s "%config["surface_given_file"])
    pism_args.append("-surface "+ surface)





if "ocean_kill_file" in config.keys():
    pism_args.append(" -calving ocean_kill -ocean_kill_file " + config["ocean_kill_file"])

ocean=""
if "ocean_th_file" in config.keys():
    pism_args.append(" -ocean_th_file " + config["ocean_th_file"])
    ocean = "th"
if "ocean_th_period" in config.keys():
    pism_args.append("-ocean_th_period " + config["ocean_th_period"])
    if not ocean:
        ocean ="th"
    else:
        if not "th" in ocean:
            ocean+=",th"
if "ocean_delta_SL_file" in config.keys():
    pism_args.append("-ocean_delta_SL_file " + config["ocean_delta_SL_file"])
    if not ocean:
        ocean ="delta_SL"
    else:
        ocean+=",delta_SL"

if ocean:
    pism_args.append(" -ocean %s "%ocean)





if "config_override" in config.keys():
    pism_args.append("-config_override " + config["config_override"])
    config_override=(config["config_override"])
    cdl_file = config_override[:-3] + ".cdl"
    if os.access(cdl_file, os.R_OK):
        if os.stat(cdl_file).st_mtime > os.stat(config_override).st_mtime:
            fu.cerr("\n\nERROR: CONFIG HAS A NEWER CDL FILE! REFUSING TO USE NETCDF")
            fu.cerr("run")
            fu.cerr("ncgen -o %s %s"%(config_override, cdl_file))
            fu.cerr("or")
            fu.cerr("touch %s"%(config_override))
            fu.cerr("to fix")
            sys.exit(333)
# test if there is a newer cdl. Die and issue warning, if so.


if ("bed_smoother_range" in config.keys()):
    pism_args.append("-bed_smoother_range " + config["bed_smoother_range"])

if ("extra_times" in config.keys()):
    pism_args.append("-extra_times " + config["extra_times"])
    pism_args.append("-extra_vars " + config["extra_vars"])
    pism_args.append("-extra_file " + output_start + "_extra")
    pism_args.append("-extra_split")

if ("ts_times" in config.keys()):
    pism_args.append(" -ts_times " + config["ts_times"])
    pism_args.append("-ts_file " + output_start + "_ts.nc")

if ("ts_vars" in config.keys()):
    pism_args.append(" -ts_vars " + config["ts_vars"])

if "direct" in config.keys():
    print config["direct"]

if "pass_arguments" in config.keys(): # anything - coming from the command line
    if "direct" in config.keys():
        config["direct"].append(config["pass_arguments"])
    else:
        config["direct"] = [config["pass_arguments"]]
if ("direct" in config.keys()):
    print config["direct"]
    pism_args.append(" ".join(config["direct"]))
# pism_args.append(config["skip"])

# if args.pass_arguments:
#     pism_args.append(args.pass_arguments)

if args.no_mpi:
    start = config["pism"]
else:
    start = " ".join((config["mpi"], config["pism"]))

print pism_args

full_pism_call = start + " " + " ".join(pism_args)

config["full_pism_call"] = full_pism_call
config_file_name = output_start + ".conf"
backup_file(config_file_name)
json.dump(config, open(config_file_name, "w"), sort_keys=True, indent=2)

error_file = output_start + ".err"
backup_file(error_file)

log_file = output_start + ".log"
backup_file(log_file)

print " running " + full_pism_call

print "tail -f ", log_file , error_file

spc = subprocess.check_call(shlex.split(full_pism_call), stdout = open(log_file, "w"), stderr= open(error_file, "w"))

if not os.access(output_start+".nc", os.R_OK):
    fu.cerr("Can't find output file " + output_start+".nc\n")
    sys.exit(1)

if os.path.getctime(output_start+".nc") < os.path.getctime(config_file_name):
    fu.cerr("RUN_PISM: Output file %s is older than config file %s. Something went wrong!\n"%(output_start+".nc", config_file_name))
    sys.exit(1)
# spc.communicate()
